/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: shard.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as dependency_1 from "./party";
import * as dependency_2 from "./map/index";
import * as dependency_3 from "./event";
import * as pb_1 from "google-protobuf";
export class Shard extends pb_1.Message {
    constructor(data?: any[] | {
        id?: string;
        partyList?: dependency_1.PartyMember[];
        map?: dependency_2.Board;
        gamelog?: dependency_3.Event[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 4], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("partyList" in data && data.partyList != undefined) {
                this.partyList = data.partyList;
            }
            if ("map" in data && data.map != undefined) {
                this.map = data.map;
            }
            if ("gamelog" in data && data.gamelog != undefined) {
                this.gamelog = data.gamelog;
            }
        }
    }
    get id() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get partyList() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.PartyMember, 2) as dependency_1.PartyMember[];
    }
    set partyList(value: dependency_1.PartyMember[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get map() {
        return pb_1.Message.getWrapperField(this, dependency_2.Board, 3) as dependency_2.Board;
    }
    set map(value: dependency_2.Board) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get gamelog() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Event, 4) as dependency_3.Event[];
    }
    set gamelog(value: dependency_3.Event[]) {
        pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    toObject() {
        const data: {
            id?: string;
            partyList?: ReturnType<typeof dependency_1.PartyMember.prototype.toObject>[];
            map?: ReturnType<typeof dependency_2.Board.prototype.toObject>;
            gamelog?: ReturnType<typeof dependency_3.Event.prototype.toObject>[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.partyList != null) {
            data.partyList = this.partyList.map((item: dependency_1.PartyMember) => item.toObject());
        }
        if (this.map != null) {
            data.map = this.map.toObject();
        }
        if (this.gamelog != null) {
            data.gamelog = this.gamelog.map((item: dependency_3.Event) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.id === "string" && this.id.length)
            writer.writeString(1, this.id);
        if (this.partyList !== undefined)
            writer.writeRepeatedMessage(2, this.partyList, (item: dependency_1.PartyMember) => item.serialize(writer));
        if (this.map !== undefined)
            writer.writeMessage(3, this.map, () => this.map.serialize(writer));
        if (this.gamelog !== undefined)
            writer.writeRepeatedMessage(4, this.gamelog, (item: dependency_3.Event) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Shard {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Shard();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.partyList, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.PartyMember.deserialize(reader), dependency_1.PartyMember));
                    break;
                case 3:
                    reader.readMessage(message.map, () => message.map = dependency_2.Board.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.gamelog, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_3.Event.deserialize(reader), dependency_3.Event));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Shard {
        return Shard.deserialize(bytes);
    }
}
export class SimpleShard extends pb_1.Message {
    constructor(data?: any[] | {
        id?: string;
        partyList?: dependency_1.PartyMember[];
        map?: dependency_2.Board;
        gamelog?: dependency_3.Event[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 4], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("partyList" in data && data.partyList != undefined) {
                this.partyList = data.partyList;
            }
            if ("map" in data && data.map != undefined) {
                this.map = data.map;
            }
            if ("gamelog" in data && data.gamelog != undefined) {
                this.gamelog = data.gamelog;
            }
        }
    }
    get id() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get partyList() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.PartyMember, 2) as dependency_1.PartyMember[];
    }
    set partyList(value: dependency_1.PartyMember[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get map() {
        return pb_1.Message.getWrapperField(this, dependency_2.Board, 3) as dependency_2.Board;
    }
    set map(value: dependency_2.Board) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get gamelog() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Event, 4) as dependency_3.Event[];
    }
    set gamelog(value: dependency_3.Event[]) {
        pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    toObject() {
        const data: {
            id?: string;
            partyList?: ReturnType<typeof dependency_1.PartyMember.prototype.toObject>[];
            map?: ReturnType<typeof dependency_2.Board.prototype.toObject>;
            gamelog?: ReturnType<typeof dependency_3.Event.prototype.toObject>[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.partyList != null) {
            data.partyList = this.partyList.map((item: dependency_1.PartyMember) => item.toObject());
        }
        if (this.map != null) {
            data.map = this.map.toObject();
        }
        if (this.gamelog != null) {
            data.gamelog = this.gamelog.map((item: dependency_3.Event) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.id === "string" && this.id.length)
            writer.writeString(1, this.id);
        if (this.partyList !== undefined)
            writer.writeRepeatedMessage(2, this.partyList, (item: dependency_1.PartyMember) => item.serialize(writer));
        if (this.map !== undefined)
            writer.writeMessage(3, this.map, () => this.map.serialize(writer));
        if (this.gamelog !== undefined)
            writer.writeRepeatedMessage(4, this.gamelog, (item: dependency_3.Event) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SimpleShard {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SimpleShard();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.partyList, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.PartyMember.deserialize(reader), dependency_1.PartyMember));
                    break;
                case 3:
                    reader.readMessage(message.map, () => message.map = dependency_2.Board.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.gamelog, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_3.Event.deserialize(reader), dependency_3.Event));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SimpleShard {
        return SimpleShard.deserialize(bytes);
    }
}
