/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: event.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as dependency_1 from "./util/index";
import * as pb_1 from "google-protobuf";
export class Event extends pb_1.Message {
    constructor(data?: any[] | {
        name?: string;
        string?: string;
        timestamp?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("string" in data && data.string != undefined) {
                this.string = data.string;
            }
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
        }
    }
    get name() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get string() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set string(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get timestamp() {
        return pb_1.Message.getField(this, 3) as number;
    }
    set timestamp(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    toObject() {
        const data: {
            name?: string;
            string?: string;
            timestamp?: number;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.string != null) {
            data.string = this.string;
        }
        if (this.timestamp != null) {
            data.timestamp = this.timestamp;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(1, this.name);
        if (typeof this.string === "string" && this.string.length)
            writer.writeString(2, this.string);
        if (this.timestamp !== undefined)
            writer.writeInt64(3, this.timestamp);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.string = reader.readString();
                    break;
                case 3:
                    message.timestamp = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Event {
        return Event.deserialize(bytes);
    }
}
export class DiceRollRequestEvent extends pb_1.Message {
    constructor(data?: any[] | {
        name?: string;
        string?: string;
        timestamp?: number;
        roll?: dependency_1.RollRequestData;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("string" in data && data.string != undefined) {
                this.string = data.string;
            }
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
            if ("roll" in data && data.roll != undefined) {
                this.roll = data.roll;
            }
        }
    }
    get name() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get string() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set string(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get timestamp() {
        return pb_1.Message.getField(this, 3) as number;
    }
    set timestamp(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get roll() {
        return pb_1.Message.getWrapperField(this, dependency_1.RollRequestData, 4) as dependency_1.RollRequestData;
    }
    set roll(value: dependency_1.RollRequestData) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    toObject() {
        const data: {
            name?: string;
            string?: string;
            timestamp?: number;
            roll?: ReturnType<typeof dependency_1.RollRequestData.prototype.toObject>;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.string != null) {
            data.string = this.string;
        }
        if (this.timestamp != null) {
            data.timestamp = this.timestamp;
        }
        if (this.roll != null) {
            data.roll = this.roll.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(1, this.name);
        if (typeof this.string === "string" && this.string.length)
            writer.writeString(2, this.string);
        if (this.timestamp !== undefined)
            writer.writeInt64(3, this.timestamp);
        if (this.roll !== undefined)
            writer.writeMessage(4, this.roll, () => this.roll.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiceRollRequestEvent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiceRollRequestEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.string = reader.readString();
                    break;
                case 3:
                    message.timestamp = reader.readInt64();
                    break;
                case 4:
                    reader.readMessage(message.roll, () => message.roll = dependency_1.RollRequestData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DiceRollRequestEvent {
        return DiceRollRequestEvent.deserialize(bytes);
    }
}
export class DiceRollEvent extends pb_1.Message {
    constructor(data?: any[] | {
        name?: string;
        string?: string;
        timestamp?: number;
        roll?: dependency_1.RollData;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("string" in data && data.string != undefined) {
                this.string = data.string;
            }
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
            if ("roll" in data && data.roll != undefined) {
                this.roll = data.roll;
            }
        }
    }
    get name() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get string() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set string(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get timestamp() {
        return pb_1.Message.getField(this, 3) as number;
    }
    set timestamp(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get roll() {
        return pb_1.Message.getWrapperField(this, dependency_1.RollData, 4) as dependency_1.RollData;
    }
    set roll(value: dependency_1.RollData) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    toObject() {
        const data: {
            name?: string;
            string?: string;
            timestamp?: number;
            roll?: ReturnType<typeof dependency_1.RollData.prototype.toObject>;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.string != null) {
            data.string = this.string;
        }
        if (this.timestamp != null) {
            data.timestamp = this.timestamp;
        }
        if (this.roll != null) {
            data.roll = this.roll.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(1, this.name);
        if (typeof this.string === "string" && this.string.length)
            writer.writeString(2, this.string);
        if (this.timestamp !== undefined)
            writer.writeInt64(3, this.timestamp);
        if (this.roll !== undefined)
            writer.writeMessage(4, this.roll, () => this.roll.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiceRollEvent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiceRollEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.string = reader.readString();
                    break;
                case 3:
                    message.timestamp = reader.readInt64();
                    break;
                case 4:
                    reader.readMessage(message.roll, () => message.roll = dependency_1.RollData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DiceRollEvent {
        return DiceRollEvent.deserialize(bytes);
    }
}
export class ChatMessageEvent extends pb_1.Message {
    constructor(data?: any[] | {
        name?: string;
        string?: string;
        timestamp?: number;
        text?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("string" in data && data.string != undefined) {
                this.string = data.string;
            }
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
            if ("text" in data && data.text != undefined) {
                this.text = data.text;
            }
        }
    }
    get name() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get string() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set string(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get timestamp() {
        return pb_1.Message.getField(this, 3) as number;
    }
    set timestamp(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get text() {
        return pb_1.Message.getField(this, 4) as string;
    }
    set text(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    toObject() {
        const data: {
            name?: string;
            string?: string;
            timestamp?: number;
            text?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.string != null) {
            data.string = this.string;
        }
        if (this.timestamp != null) {
            data.timestamp = this.timestamp;
        }
        if (this.text != null) {
            data.text = this.text;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(1, this.name);
        if (typeof this.string === "string" && this.string.length)
            writer.writeString(2, this.string);
        if (this.timestamp !== undefined)
            writer.writeInt64(3, this.timestamp);
        if (typeof this.text === "string" && this.text.length)
            writer.writeString(4, this.text);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatMessageEvent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatMessageEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.string = reader.readString();
                    break;
                case 3:
                    message.timestamp = reader.readInt64();
                    break;
                case 4:
                    message.text = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChatMessageEvent {
        return ChatMessageEvent.deserialize(bytes);
    }
}
export class EntityMoveEvent extends pb_1.Message {
    constructor(data?: any[] | {
        name?: string;
        string?: string;
        timestamp?: number;
        entity?: number;
        position?: dependency_1.Vector2;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("string" in data && data.string != undefined) {
                this.string = data.string;
            }
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
            if ("entity" in data && data.entity != undefined) {
                this.entity = data.entity;
            }
            if ("position" in data && data.position != undefined) {
                this.position = data.position;
            }
        }
    }
    get name() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get string() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set string(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get timestamp() {
        return pb_1.Message.getField(this, 3) as number;
    }
    set timestamp(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get entity() {
        return pb_1.Message.getField(this, 4) as number;
    }
    set entity(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get position() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector2, 5) as dependency_1.Vector2;
    }
    set position(value: dependency_1.Vector2) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    toObject() {
        const data: {
            name?: string;
            string?: string;
            timestamp?: number;
            entity?: number;
            position?: ReturnType<typeof dependency_1.Vector2.prototype.toObject>;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.string != null) {
            data.string = this.string;
        }
        if (this.timestamp != null) {
            data.timestamp = this.timestamp;
        }
        if (this.entity != null) {
            data.entity = this.entity;
        }
        if (this.position != null) {
            data.position = this.position.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(1, this.name);
        if (typeof this.string === "string" && this.string.length)
            writer.writeString(2, this.string);
        if (this.timestamp !== undefined)
            writer.writeInt64(3, this.timestamp);
        if (this.entity !== undefined)
            writer.writeInt32(4, this.entity);
        if (this.position !== undefined)
            writer.writeMessage(5, this.position, () => this.position.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EntityMoveEvent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EntityMoveEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.string = reader.readString();
                    break;
                case 3:
                    message.timestamp = reader.readInt64();
                    break;
                case 4:
                    message.entity = reader.readInt32();
                    break;
                case 5:
                    reader.readMessage(message.position, () => message.position = dependency_1.Vector2.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): EntityMoveEvent {
        return EntityMoveEvent.deserialize(bytes);
    }
}
export class EntityCreateEvent extends pb_1.Message {
    constructor(data?: any[] | {
        name?: string;
        string?: string;
        timestamp?: number;
        entity?: number;
        newEntityData?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("string" in data && data.string != undefined) {
                this.string = data.string;
            }
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
            if ("entity" in data && data.entity != undefined) {
                this.entity = data.entity;
            }
            if ("newEntityData" in data && data.newEntityData != undefined) {
                this.newEntityData = data.newEntityData;
            }
        }
    }
    get name() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get string() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set string(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get timestamp() {
        return pb_1.Message.getField(this, 3) as number;
    }
    set timestamp(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get entity() {
        return pb_1.Message.getField(this, 4) as number;
    }
    set entity(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get newEntityData() {
        return pb_1.Message.getField(this, 5) as string;
    }
    set newEntityData(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    toObject() {
        const data: {
            name?: string;
            string?: string;
            timestamp?: number;
            entity?: number;
            newEntityData?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.string != null) {
            data.string = this.string;
        }
        if (this.timestamp != null) {
            data.timestamp = this.timestamp;
        }
        if (this.entity != null) {
            data.entity = this.entity;
        }
        if (this.newEntityData != null) {
            data.newEntityData = this.newEntityData;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(1, this.name);
        if (typeof this.string === "string" && this.string.length)
            writer.writeString(2, this.string);
        if (this.timestamp !== undefined)
            writer.writeInt64(3, this.timestamp);
        if (this.entity !== undefined)
            writer.writeInt32(4, this.entity);
        if (typeof this.newEntityData === "string" && this.newEntityData.length)
            writer.writeString(5, this.newEntityData);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EntityCreateEvent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EntityCreateEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.string = reader.readString();
                    break;
                case 3:
                    message.timestamp = reader.readInt64();
                    break;
                case 4:
                    message.entity = reader.readInt32();
                    break;
                case 5:
                    message.newEntityData = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): EntityCreateEvent {
        return EntityCreateEvent.deserialize(bytes);
    }
}
export class EntityModifyEvent extends pb_1.Message {
    constructor(data?: any[] | {
        name?: string;
        string?: string;
        timestamp?: number;
        entity?: number;
        newEntityData?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("string" in data && data.string != undefined) {
                this.string = data.string;
            }
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
            if ("entity" in data && data.entity != undefined) {
                this.entity = data.entity;
            }
            if ("newEntityData" in data && data.newEntityData != undefined) {
                this.newEntityData = data.newEntityData;
            }
        }
    }
    get name() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get string() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set string(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get timestamp() {
        return pb_1.Message.getField(this, 3) as number;
    }
    set timestamp(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get entity() {
        return pb_1.Message.getField(this, 4) as number;
    }
    set entity(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get newEntityData() {
        return pb_1.Message.getField(this, 5) as string;
    }
    set newEntityData(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    toObject() {
        const data: {
            name?: string;
            string?: string;
            timestamp?: number;
            entity?: number;
            newEntityData?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.string != null) {
            data.string = this.string;
        }
        if (this.timestamp != null) {
            data.timestamp = this.timestamp;
        }
        if (this.entity != null) {
            data.entity = this.entity;
        }
        if (this.newEntityData != null) {
            data.newEntityData = this.newEntityData;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(1, this.name);
        if (typeof this.string === "string" && this.string.length)
            writer.writeString(2, this.string);
        if (this.timestamp !== undefined)
            writer.writeInt64(3, this.timestamp);
        if (this.entity !== undefined)
            writer.writeInt32(4, this.entity);
        if (typeof this.newEntityData === "string" && this.newEntityData.length)
            writer.writeString(5, this.newEntityData);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EntityModifyEvent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EntityModifyEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.string = reader.readString();
                    break;
                case 3:
                    message.timestamp = reader.readInt64();
                    break;
                case 4:
                    message.entity = reader.readInt32();
                    break;
                case 5:
                    message.newEntityData = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): EntityModifyEvent {
        return EntityModifyEvent.deserialize(bytes);
    }
}
export class EntityRemoveEvent extends pb_1.Message {
    constructor(data?: any[] | {
        name?: string;
        string?: string;
        timestamp?: number;
        entity?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("string" in data && data.string != undefined) {
                this.string = data.string;
            }
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
            if ("entity" in data && data.entity != undefined) {
                this.entity = data.entity;
            }
        }
    }
    get name() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get string() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set string(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get timestamp() {
        return pb_1.Message.getField(this, 3) as number;
    }
    set timestamp(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get entity() {
        return pb_1.Message.getField(this, 4) as number;
    }
    set entity(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    toObject() {
        const data: {
            name?: string;
            string?: string;
            timestamp?: number;
            entity?: number;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.string != null) {
            data.string = this.string;
        }
        if (this.timestamp != null) {
            data.timestamp = this.timestamp;
        }
        if (this.entity != null) {
            data.entity = this.entity;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(1, this.name);
        if (typeof this.string === "string" && this.string.length)
            writer.writeString(2, this.string);
        if (this.timestamp !== undefined)
            writer.writeInt64(3, this.timestamp);
        if (this.entity !== undefined)
            writer.writeInt32(4, this.entity);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EntityRemoveEvent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EntityRemoveEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.string = reader.readString();
                    break;
                case 3:
                    message.timestamp = reader.readInt64();
                    break;
                case 4:
                    message.entity = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): EntityRemoveEvent {
        return EntityRemoveEvent.deserialize(bytes);
    }
}
export class EntityGrantPermissionEvent extends pb_1.Message {
    constructor(data?: any[] | {
        name?: string;
        string?: string;
        timestamp?: number;
        entity?: number;
        newEntityData?: string;
        permission?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("string" in data && data.string != undefined) {
                this.string = data.string;
            }
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
            if ("entity" in data && data.entity != undefined) {
                this.entity = data.entity;
            }
            if ("newEntityData" in data && data.newEntityData != undefined) {
                this.newEntityData = data.newEntityData;
            }
            if ("permission" in data && data.permission != undefined) {
                this.permission = data.permission;
            }
        }
    }
    get name() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get string() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set string(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get timestamp() {
        return pb_1.Message.getField(this, 3) as number;
    }
    set timestamp(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get entity() {
        return pb_1.Message.getField(this, 4) as number;
    }
    set entity(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get newEntityData() {
        return pb_1.Message.getField(this, 5) as string;
    }
    set newEntityData(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get permission() {
        return pb_1.Message.getField(this, 6) as string;
    }
    set permission(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    toObject() {
        const data: {
            name?: string;
            string?: string;
            timestamp?: number;
            entity?: number;
            newEntityData?: string;
            permission?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.string != null) {
            data.string = this.string;
        }
        if (this.timestamp != null) {
            data.timestamp = this.timestamp;
        }
        if (this.entity != null) {
            data.entity = this.entity;
        }
        if (this.newEntityData != null) {
            data.newEntityData = this.newEntityData;
        }
        if (this.permission != null) {
            data.permission = this.permission;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(1, this.name);
        if (typeof this.string === "string" && this.string.length)
            writer.writeString(2, this.string);
        if (this.timestamp !== undefined)
            writer.writeInt64(3, this.timestamp);
        if (this.entity !== undefined)
            writer.writeInt32(4, this.entity);
        if (typeof this.newEntityData === "string" && this.newEntityData.length)
            writer.writeString(5, this.newEntityData);
        if (typeof this.permission === "string" && this.permission.length)
            writer.writeString(6, this.permission);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EntityGrantPermissionEvent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EntityGrantPermissionEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.string = reader.readString();
                    break;
                case 3:
                    message.timestamp = reader.readInt64();
                    break;
                case 4:
                    message.entity = reader.readInt32();
                    break;
                case 5:
                    message.newEntityData = reader.readString();
                    break;
                case 6:
                    message.permission = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): EntityGrantPermissionEvent {
        return EntityGrantPermissionEvent.deserialize(bytes);
    }
}
export class GrantPermissionEvent extends pb_1.Message {
    constructor(data?: any[] | {
        name?: string;
        string?: string;
        timestamp?: number;
        entity?: number;
        permission?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("string" in data && data.string != undefined) {
                this.string = data.string;
            }
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
            if ("entity" in data && data.entity != undefined) {
                this.entity = data.entity;
            }
            if ("permission" in data && data.permission != undefined) {
                this.permission = data.permission;
            }
        }
    }
    get name() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get string() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set string(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get timestamp() {
        return pb_1.Message.getField(this, 3) as number;
    }
    set timestamp(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get entity() {
        return pb_1.Message.getField(this, 4) as number;
    }
    set entity(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get permission() {
        return pb_1.Message.getField(this, 5) as string;
    }
    set permission(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    toObject() {
        const data: {
            name?: string;
            string?: string;
            timestamp?: number;
            entity?: number;
            permission?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.string != null) {
            data.string = this.string;
        }
        if (this.timestamp != null) {
            data.timestamp = this.timestamp;
        }
        if (this.entity != null) {
            data.entity = this.entity;
        }
        if (this.permission != null) {
            data.permission = this.permission;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(1, this.name);
        if (typeof this.string === "string" && this.string.length)
            writer.writeString(2, this.string);
        if (this.timestamp !== undefined)
            writer.writeInt64(3, this.timestamp);
        if (this.entity !== undefined)
            writer.writeInt32(4, this.entity);
        if (typeof this.permission === "string" && this.permission.length)
            writer.writeString(5, this.permission);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GrantPermissionEvent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GrantPermissionEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.string = reader.readString();
                    break;
                case 3:
                    message.timestamp = reader.readInt64();
                    break;
                case 4:
                    message.entity = reader.readInt32();
                    break;
                case 5:
                    message.permission = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GrantPermissionEvent {
        return GrantPermissionEvent.deserialize(bytes);
    }
}
