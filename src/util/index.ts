/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: util/index.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as pb_1 from "google-protobuf";
export class RollRequestData extends pb_1.Message {
    constructor(data?: any[] | {
        dieQuantity?: number;
        modifier?: number;
        dieType?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("dieQuantity" in data && data.dieQuantity != undefined) {
                this.dieQuantity = data.dieQuantity;
            }
            if ("modifier" in data && data.modifier != undefined) {
                this.modifier = data.modifier;
            }
            if ("dieType" in data && data.dieType != undefined) {
                this.dieType = data.dieType;
            }
        }
    }
    get dieQuantity() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set dieQuantity(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get modifier() {
        return pb_1.Message.getField(this, 2) as number;
    }
    set modifier(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get dieType() {
        return pb_1.Message.getField(this, 3) as number;
    }
    set dieType(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    toObject() {
        const data: {
            dieQuantity?: number;
            modifier?: number;
            dieType?: number;
        } = {};
        if (this.dieQuantity != null) {
            data.dieQuantity = this.dieQuantity;
        }
        if (this.modifier != null) {
            data.modifier = this.modifier;
        }
        if (this.dieType != null) {
            data.dieType = this.dieType;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.dieQuantity !== undefined)
            writer.writeUint32(1, this.dieQuantity);
        if (this.modifier !== undefined)
            writer.writeSint32(2, this.modifier);
        if (this.dieType !== undefined)
            writer.writeUint32(3, this.dieType);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RollRequestData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RollRequestData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.dieQuantity = reader.readUint32();
                    break;
                case 2:
                    message.modifier = reader.readSint32();
                    break;
                case 3:
                    message.dieType = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RollRequestData {
        return RollRequestData.deserialize(bytes);
    }
}
export class RollData extends pb_1.Message {
    constructor(data?: any[] | {
        dieQuantity?: number;
        modifier?: number;
        dieType?: number;
        rolls?: number[];
        result?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("dieQuantity" in data && data.dieQuantity != undefined) {
                this.dieQuantity = data.dieQuantity;
            }
            if ("modifier" in data && data.modifier != undefined) {
                this.modifier = data.modifier;
            }
            if ("dieType" in data && data.dieType != undefined) {
                this.dieType = data.dieType;
            }
            if ("rolls" in data && data.rolls != undefined) {
                this.rolls = data.rolls;
            }
            if ("result" in data && data.result != undefined) {
                this.result = data.result;
            }
        }
    }
    get dieQuantity() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set dieQuantity(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get modifier() {
        return pb_1.Message.getField(this, 2) as number;
    }
    set modifier(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get dieType() {
        return pb_1.Message.getField(this, 3) as number;
    }
    set dieType(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get rolls() {
        return pb_1.Message.getField(this, 4) as number[];
    }
    set rolls(value: number[]) {
        pb_1.Message.setField(this, 4, value);
    }
    get result() {
        return pb_1.Message.getField(this, 5) as number;
    }
    set result(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    toObject() {
        const data: {
            dieQuantity?: number;
            modifier?: number;
            dieType?: number;
            rolls?: number[];
            result?: number;
        } = {};
        if (this.dieQuantity != null) {
            data.dieQuantity = this.dieQuantity;
        }
        if (this.modifier != null) {
            data.modifier = this.modifier;
        }
        if (this.dieType != null) {
            data.dieType = this.dieType;
        }
        if (this.rolls != null) {
            data.rolls = this.rolls;
        }
        if (this.result != null) {
            data.result = this.result;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.dieQuantity !== undefined)
            writer.writeUint32(1, this.dieQuantity);
        if (this.modifier !== undefined)
            writer.writeSint32(2, this.modifier);
        if (this.dieType !== undefined)
            writer.writeUint32(3, this.dieType);
        if (this.rolls !== undefined)
            writer.writePackedInt32(4, this.rolls);
        if (this.result !== undefined)
            writer.writeInt64(5, this.result);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RollData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RollData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.dieQuantity = reader.readUint32();
                    break;
                case 2:
                    message.modifier = reader.readSint32();
                    break;
                case 3:
                    message.dieType = reader.readUint32();
                    break;
                case 4:
                    pb_1.Message.addToRepeatedField(message, 4, reader.readPackedInt32());
                    break;
                case 5:
                    message.result = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RollData {
        return RollData.deserialize(bytes);
    }
}
export class Vector2 extends pb_1.Message {
    constructor(data?: any[] | {
        x?: number;
        y?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
        }
    }
    get x() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get y() {
        return pb_1.Message.getField(this, 2) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    toObject() {
        const data: {
            x?: number;
            y?: number;
        } = {};
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.x !== undefined)
            writer.writeSint32(1, this.x);
        if (this.y !== undefined)
            writer.writeSint32(2, this.y);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Vector2 {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Vector2();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.x = reader.readSint32();
                    break;
                case 2:
                    message.y = reader.readSint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Vector2 {
        return Vector2.deserialize(bytes);
    }
}
export class Vector3 extends pb_1.Message {
    constructor(data?: any[] | {
        x?: number;
        y?: number;
        z?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
            if ("z" in data && data.z != undefined) {
                this.z = data.z;
            }
        }
    }
    get x() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get y() {
        return pb_1.Message.getField(this, 2) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get z() {
        return pb_1.Message.getField(this, 3) as number;
    }
    set z(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    toObject() {
        const data: {
            x?: number;
            y?: number;
            z?: number;
        } = {};
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        if (this.z != null) {
            data.z = this.z;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.x !== undefined)
            writer.writeSint32(1, this.x);
        if (this.y !== undefined)
            writer.writeSint32(2, this.y);
        if (this.z !== undefined)
            writer.writeSint32(3, this.z);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Vector3 {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Vector3();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.x = reader.readSint32();
                    break;
                case 2:
                    message.y = reader.readSint32();
                    break;
                case 3:
                    message.z = reader.readSint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Vector3 {
        return Vector3.deserialize(bytes);
    }
}
