/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: party.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as pb_1 from "google-protobuf";
export class PartyMember extends pb_1.Message {
    constructor(data?: any[] | {
        playerID?: string;
        userID?: string;
        permissions?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("playerID" in data && data.playerID != undefined) {
                this.playerID = data.playerID;
            }
            if ("userID" in data && data.userID != undefined) {
                this.userID = data.userID;
            }
            if ("permissions" in data && data.permissions != undefined) {
                this.permissions = data.permissions;
            }
        }
    }
    get playerID() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set playerID(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get userID() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set userID(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get permissions() {
        return pb_1.Message.getField(this, 3) as string;
    }
    set permissions(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    toObject() {
        const data: {
            playerID?: string;
            userID?: string;
            permissions?: string;
        } = {};
        if (this.playerID != null) {
            data.playerID = this.playerID;
        }
        if (this.userID != null) {
            data.userID = this.userID;
        }
        if (this.permissions != null) {
            data.permissions = this.permissions;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.playerID === "string" && this.playerID.length)
            writer.writeString(1, this.playerID);
        if (typeof this.userID === "string" && this.userID.length)
            writer.writeString(2, this.userID);
        if (typeof this.permissions === "string" && this.permissions.length)
            writer.writeString(3, this.permissions);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PartyMember {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PartyMember();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.playerID = reader.readString();
                    break;
                case 2:
                    message.userID = reader.readString();
                    break;
                case 3:
                    message.permissions = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PartyMember {
        return PartyMember.deserialize(bytes);
    }
}
