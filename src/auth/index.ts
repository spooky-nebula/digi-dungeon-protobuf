/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: auth/index.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as dependency_1 from "./../shard";
import * as pb_1 from "google-protobuf";
export class HandshakeData extends pb_1.Message {
    constructor(data?: any[] | {
        token?: string;
        shardID?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("shardID" in data && data.shardID != undefined) {
                this.shardID = data.shardID;
            }
        }
    }
    get token() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get shardID() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set shardID(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    toObject() {
        const data: {
            token?: string;
            shardID?: string;
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.shardID != null) {
            data.shardID = this.shardID;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.token === "string" && this.token.length)
            writer.writeString(1, this.token);
        if (typeof this.shardID === "string" && this.shardID.length)
            writer.writeString(2, this.shardID);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HandshakeData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HandshakeData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                case 2:
                    message.shardID = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HandshakeData {
        return HandshakeData.deserialize(bytes);
    }
}
export class HandshakeResponseData extends pb_1.Message {
    constructor(data?: any[] | {
        shardData?: dependency_1.SimpleShard;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("shardData" in data && data.shardData != undefined) {
                this.shardData = data.shardData;
            }
        }
    }
    get shardData() {
        return pb_1.Message.getWrapperField(this, dependency_1.SimpleShard, 1) as dependency_1.SimpleShard;
    }
    set shardData(value: dependency_1.SimpleShard) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    toObject() {
        const data: {
            shardData?: ReturnType<typeof dependency_1.SimpleShard.prototype.toObject>;
        } = {};
        if (this.shardData != null) {
            data.shardData = this.shardData.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.shardData !== undefined)
            writer.writeMessage(1, this.shardData, () => this.shardData.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HandshakeResponseData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HandshakeResponseData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.shardData, () => message.shardData = dependency_1.SimpleShard.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HandshakeResponseData {
        return HandshakeResponseData.deserialize(bytes);
    }
}
export class AuthRequest extends pb_1.Message {
    constructor(data?: any[] | {
        token?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
        }
    }
    get token() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    toObject() {
        const data: {
            token?: string;
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.token === "string" && this.token.length)
            writer.writeString(1, this.token);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AuthRequest {
        return AuthRequest.deserialize(bytes);
    }
}
export class AuthResponse extends pb_1.Message {
    constructor(data?: any[] | {
        success?: boolean;
        token?: string;
        message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get success() {
        return pb_1.Message.getField(this, 1) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    get token() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get message() {
        return pb_1.Message.getField(this, 3) as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    toObject() {
        const data: {
            success?: boolean;
            token?: string;
            message?: string;
        } = {};
        if (this.success != null) {
            data.success = this.success;
        }
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.success !== undefined)
            writer.writeBool(1, this.success);
        if (typeof this.token === "string" && this.token.length)
            writer.writeString(2, this.token);
        if (typeof this.message === "string" && this.message.length)
            writer.writeString(3, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.success = reader.readBool();
                    break;
                case 2:
                    message.token = reader.readString();
                    break;
                case 3:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AuthResponse {
        return AuthResponse.deserialize(bytes);
    }
}
export class UserRegisterData extends pb_1.Message {
    constructor(data?: any[] | {
        username?: string;
        password?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
        }
    }
    get username() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get password() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    toObject() {
        const data: {
            username?: string;
            password?: string;
        } = {};
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.username === "string" && this.username.length)
            writer.writeString(1, this.username);
        if (typeof this.password === "string" && this.password.length)
            writer.writeString(2, this.password);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserRegisterData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserRegisterData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.username = reader.readString();
                    break;
                case 2:
                    message.password = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UserRegisterData {
        return UserRegisterData.deserialize(bytes);
    }
}
export class UserLoginData extends pb_1.Message {
    constructor(data?: any[] | {
        username?: string;
        password?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
        }
    }
    get username() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get password() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    toObject() {
        const data: {
            username?: string;
            password?: string;
        } = {};
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.username === "string" && this.username.length)
            writer.writeString(1, this.username);
        if (typeof this.password === "string" && this.password.length)
            writer.writeString(2, this.password);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserLoginData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserLoginData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.username = reader.readString();
                    break;
                case 2:
                    message.password = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UserLoginData {
        return UserLoginData.deserialize(bytes);
    }
}
export class UserLogoutData extends pb_1.Message {
    constructor(data?: any[] | {
        token?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
        }
    }
    get token() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    toObject() {
        const data: {
            token?: string;
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.token === "string" && this.token.length)
            writer.writeString(2, this.token);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserLogoutData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserLogoutData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 2:
                    message.token = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UserLogoutData {
        return UserLogoutData.deserialize(bytes);
    }
}
